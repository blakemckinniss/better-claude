{
  "openrouter": {
    "url": "https://openrouter.ai/api/v1/chat/completions",
    "default_model": "google/gemini-2.5-flash",
    "fallback_models": [
      "google/gemini-2.5-pro",
      "meta-llama/llama-3.1-8b-instruct:free"
    ],
    "temperature": 0.3,
    "max_tokens": 10000,
    "timeout": 30.0,
    "sync_timeout": 15
  },
  "spacy": {
    "model": "en_core_web_sm",
    "patterns": {
      "urgency": [
        "urgent",
        "asap",
        "immediately",
        "critical",
        "emergency"
      ],
      "tech_debt": [
        "hack",
        "workaround",
        "temporary",
        "quick"
      ],
      "frameworks": [
        "React",
        "Vue",
        "Angular",
        "Django",
        "Flask",
        "Rails",
        "Spring",
        "Express"
      ]
    }
  },
  "task_categories": {
    "debugging": [
      "fix",
      "debug",
      "error",
      "bug",
      "issue",
      "problem",
      "crash",
      "fail"
    ],
    "implementation": [
      "implement",
      "create",
      "build",
      "add",
      "develop",
      "new feature"
    ],
    "refactoring": [
      "refactor",
      "optimize",
      "improve",
      "clean",
      "reorganize",
      "restructure"
    ],
    "security": [
      "security",
      "auth",
      "authentication",
      "jwt",
      "token",
      "encrypt",
      "password",
      "vulnerable"
    ],
    "performance": [
      "performance",
      "slow",
      "optimize",
      "speed",
      "latency",
      "bottleneck"
    ],
    "architecture": [
      "architecture",
      "microservice",
      "design",
      "pattern",
      "structure",
      "system"
    ],
    "testing": [
      "test",
      "testing",
      "coverage",
      "unit test",
      "integration test"
    ],
    "documentation": [
      "document",
      "docs",
      "readme",
      "comment",
      "explain"
    ],
    "deployment": [
      "deploy",
      "deployment",
      "ci/cd",
      "pipeline",
      "production"
    ],
    "migration": [
      "migrate",
      "migration",
      "upgrade",
      "version",
      "update",
      "port"
    ]
  },
  "complexity_indicators": {
    "simple": [
      "simple",
      "quick",
      "basic",
      "trivial",
      "straightforward",
      "easy"
    ],
    "moderate": [
      "moderate",
      "standard",
      "typical",
      "normal"
    ],
    "complex": [
      "complex",
      "complicated",
      "intricate",
      "advanced",
      "sophisticated",
      "challenging"
    ]
  },
  "risk_indicators": {
    "data_loss": [
      "delete",
      "remove",
      "drop",
      "destroy",
      "purge",
      "truncate"
    ],
    "security": [
      "auth",
      "password",
      "token",
      "encryption",
      "access",
      "permission"
    ],
    "financial": [
      "payment",
      "billing",
      "transaction",
      "money",
      "financial"
    ],
    "user_impact": [
      "user",
      "customer",
      "client",
      "account"
    ],
    "system_critical": [
      "production",
      "critical",
      "core",
      "essential",
      "vital"
    ]
  },
  "analysis": {
    "priority_keywords": [
      "error",
      "fail",
      "critical",
      "warning",
      "TODO",
      "FIXME"
    ],
    "tech_terms": [
      "architecture",
      "microservice",
      "distributed",
      "scalable",
      "concurrent",
      "async"
    ],
    "system_patterns": [
      "api",
      "database",
      "server",
      "client",
      "frontend",
      "backend",
      "service"
    ],
    "tech_keywords": [
      "api",
      "database",
      "cache",
      "queue",
      "webhook",
      "endpoint",
      "schema",
      "migration"
    ],
    "error_patterns": [
      "error:",
      "exception:",
      "failed:",
      "‚ùå",
      "traceback",
      "stack trace"
    ],
    "positive_words": [
      "good",
      "great",
      "excellent",
      "improve",
      "enhance",
      "optimize"
    ],
    "negative_words": [
      "bad",
      "poor",
      "broken",
      "fail",
      "error",
      "wrong",
      "issue"
    ]
  },
  "questionnaire": {
    "complexity_map": {
      "simple": "Simple",
      "moderate": "Moderate",
      "complex": "Complex"
    },
    "time_map": {
      "simple": "15-30 minutes",
      "moderate": "30-90 minutes",
      "complex": "2-4 hours"
    },
    "task_to_agent": {
      "debugging": "debugger",
      "security": "security-auditor",
      "refactoring": "code-refactorer",
      "performance": "performance-optimizer",
      "testing": "test-strategist",
      "architecture": "api-architect",
      "migration": "migration-planner"
    },
    "risk_levels": {
      "base": 3,
      "per_risk_multiplier": 2,
      "urgency_bonus": 1,
      "max_risk": 10
    },
    "confidence_levels": {
      "base": 7,
      "urgency_penalty": 1,
      "complexity_penalty": 1,
      "entity_bonus": 1
    }
  },
  "logging": {
    "level": "DEBUG",
    "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    "handlers": [
      "stream"
    ]
  },
  "api": {
    "headers": {
      "Content-Type": "application/json",
      "HTTP-Referer": "https://github.com/anthropics/claude-code",
      "X-Title": "Claude Code AI Context Optimizer"
    }
  },
  "context_detection": {
    "tags": [
      "<lsp-diagnostics>",
      "<test-status>",
      "<git-status>",
      "<mcp-tools>",
      "<session-data>"
    ],
    "section_patterns": {
      "diagnostics": [
        "‚ùå Errors:",
        "‚ö†Ô∏è Warnings:",
        "üí° Info:"
      ],
      "git": [
        "Current branch:",
        "Status:",
        "Recent commits:"
      ],
      "tests": [
        "PYTEST:",
        "Recent failures:",
        "Coverage:"
      ]
    }
  },
  "display": {
    "max_context_sections": 5,
    "max_context_length": 2000,
    "truncation_marker": "... [truncated]",
    "section_separator": "\n\n"
  },
  "output_formats": {
    "fallback_template": "USER'S QUESTION:\n{user_prompt}\n\nCONTEXT ANALYSIS:\n{analysis}\n\nRECOMMENDED APPROACH:\n{approach}",
    "context_prefix": "AVAILABLE CONTEXT:",
    "analysis_prefix": "CONTEXT ANALYSIS:",
    "approach_prefix": "RECOMMENDED APPROACH:"
  },
  "enhanced_context_patterns": {
    "git_changes": [
      "Modified files?:\\s*\\n(.+)",
      "On branch\\s+(.+)",
      "Changes to be committed:\\s*\\n(.+)"
    ],
    "errors_critical": [
      "(?i)(error|exception|failed|crash).*:(.+)",
      "‚ùå\\s*(.+)",
      "Traceback.*\\n(.+)"
    ],
    "mcp_tools": [
      "<mcp-([^>]+)>",
      "mcp__([^_]+)__",
      "Available tools:\\s*\\n(.+)"
    ],
    "code_analysis": [
      "<tree-sitter[^>]*>(.+?)</tree-sitter>",
      "AST analysis:\\s*\\n(.+)",
      "Functions found:\\s*\\n(.+)"
    ],
    "performance_hints": [
      "PERFORMANCE[^:]*:\\s*(.+)",
      "Optimization opportunity:\\s*(.+)",
      "Slow operation detected:\\s*(.+)"
    ],
    "session_context": [
      "Session started:\\s*(.+)",
      "Previous conversation:\\s*(.+)",
      "Context history:\\s*(.+)"
    ]
  },
  "zed_pro": {
    "command": [
      "claude",
      "--agent",
      "zed-pro",
      "--prompt"
    ],
    "timeout": 120,
    "prompt_template": "CRITICAL ZED-PRO ORCHESTRATION REQUEST\n\nüéØ USER PROMPT (Original Request):\n{user_prompt}\n\nüß† ENHANCED CONTEXT (Gemini AI Processed):\n{enhanced_context}\n\nüö® ORCHESTRATION MANDATE:\nYou are receiving this request immediately after Gemini AI context enhancement as per your CRITICAL MASTER ORCHESTRATOR role. Analyze both the user prompt and enhanced context to:\n\n1. Determine if this requires subagent orchestration (0-6 specialist subagents)\n2. Create Business Requirements Document (BRD) if complex\n3. Provide strategic analysis and execution recommendations\n4. Coordinate with ZEN strategic planning tools as needed\n\nCONTEXT INTEGRATION: The enhanced context above has been optimized by Gemini AI and includes project-specific intelligence. Use this enhanced understanding to make superior orchestration decisions.\n\nExecute your MANDATORY orchestration analysis now.",
    "result_header": "\n\n# ZED-PRO ORCHESTRATOR ANALYSIS\n",
    "log_messages": {
      "invoking": "[ZED-PRO] Invoking master orchestrator with enhanced context (prompt length: {prompt_length} chars)",
      "success": "[ZED-PRO] Orchestrator analysis completed successfully in {execution_time:.2f}s (output: {output_length} chars)",
      "empty_output": "[ZED-PRO] WARNING - Empty output from orchestrator after {execution_time:.2f}s",
      "error_exit": "[ZED-PRO] ERROR - Exit code {exit_code} after {execution_time:.2f}s: {error_output}",
      "timeout": "[ZED-PRO] ERROR - Orchestrator timed out after {timeout} seconds",
      "not_found": "[ZED-PRO] ERROR - Claude CLI not found in PATH",
      "unexpected": "[ZED-PRO] ERROR - Unexpected error invoking orchestrator: {error}"
    }
  },
  "questionnaire_template": {
    "header": "\n=== CLAUDE CODE META ANALYSIS ===\n",
    "footer": "===\n",
    "questions": [
      {
        "number": 1,
        "text": "Confidence Level",
        "default": "7/10"
      },
      {
        "number": 2,
        "text": "Additional Information Needed",
        "default": "None immediately apparent"
      },
      {
        "number": 3,
        "text": "Primary Concerns",
        "default": "code quality and maintainability"
      },
      {
        "number": 4,
        "text": "Proposed Next Steps",
        "default": "1. Understand requirements\n   2. Plan approach\n   3. Execute changes\n   4. Verify functionality"
      },
      {
        "number": 5,
        "text": "Web Research Recommended",
        "default": "No"
      },
      {
        "number": 6,
        "text": "Context7 Documentation Needed",
        "default": "No"
      },
      {
        "number": 7,
        "text": "ZEN Consultation Advised",
        "default": "No"
      },
      {
        "number": 8,
        "text": "Task Complexity Assessment",
        "default": "Moderate"
      },
      {
        "number": 9,
        "text": "Estimated Time",
        "default": "30-90 minutes"
      },
      {
        "number": 10,
        "text": "Alternative Approaches",
        "default": "None immediately apparent"
      },
      {
        "number": 11,
        "text": "Parallelizable Components",
        "default": "None identified"
      },
      {
        "number": 12,
        "text": "Subagent Recommendations",
        "default": "None required"
      },
      {
        "number": 13,
        "text": "Warnings/Hidden Risks",
        "default": "None identified"
      },
      {
        "number": 14,
        "text": "Counter-Arguments",
        "default": "None"
      },
      {
        "number": 15,
        "text": "Technical Debt Impact",
        "default": "Neutral"
      },
      {
        "number": 16,
        "text": "Risk Level",
        "default": "3/10"
      },
      {
        "number": 17,
        "text": "Affected Systems",
        "default": "Local only"
      },
      {
        "number": 18,
        "text": "Bias/Anti-Pattern Check",
        "default": "No"
      },
      {
        "number": 19,
        "text": "Better Approach Available",
        "default": "No"
      },
      {
        "number": 20,
        "text": "Clarifying Questions",
        "default": "None at this time"
      }
    ]
  },
  "enhanced_prompt_templates": {
    "general": "## USER REQUEST ANALYSIS\n\n**Original Question:** {user_prompt}\n\n**Task Type Detected:** {task_type}\n\n## CONTEXT SUMMARY\n\n{context_preview}\n\n## DETECTED ELEMENTS\n\n{detected_elements}\n\n## KEY SEMANTIC ANALYSIS\n- **Action Words:** {key_verbs}\n- **Subject Matter:** {key_nouns}\n\n## ENHANCED REQUEST FOR CLAUDE\n\n### Primary Task\n{user_prompt}\n\n### Relevant Context\nBased on the available context, here are the key points that will help in addressing this request:\n\n{full_context}\n\n### Recommended Approach\nGiven the detected {task_type} nature of this task and the available context, I recommend focusing on the specific elements identified above.\n\nNow, based on my analysis of the user's request and all the available context above, I will fill out the Claude Code Meta Analysis questionnaire:\n\n=== CLAUDE CODE META ANALYSIS ===\n1. Confidence Level: [Analyze the completeness of context and clarity of request to determine 1-10]\n2. Additional Information Needed: [Based on gaps in the context, what specific information would help?]\n3. Primary Concerns: [Identify main challenges based on the task type and context]\n4. Proposed Next Steps: [Create numbered list based on task type and available context]\n5. Web Research Recommended: [Yes if external APIs, libraries, or recent tech mentioned; No if context is sufficient]\n6. Context7 Documentation Needed: [Yes if specific libraries/frameworks mentioned; No otherwise]\n7. ZEN Consultation Advised: [Yes for complex architecture/design tasks; No for simple implementations]\n8. Task Complexity Assessment: [Simple/Moderate/Complex based on scope and requirements]\n9. Estimated Time: [Based on task complexity and scope from context]\n10. Alternative Approaches: [Suggest different solutions based on the context]\n11. Parallelizable Components: [Identify independent parts from the task structure]\n12. Subagent Recommendations: [Suggest specialist agents based on task type]\n13. Warnings/Hidden Risks: [Identify potential issues from context clues]\n14. Counter-Arguments: [Consider why the approach might not be optimal]\n15. Technical Debt Impact: [Assess if changes create/reduce/maintain debt]\n16. Risk Level: [1-10 based on potential impact and complexity]\n17. Affected Systems: [List systems/files mentioned in context]\n18. Bias/Anti-Pattern Check: [Evaluate if request suggests bad practices]\n19. Better Approach Available: [Consider if context suggests better alternatives]\n20. Clarifying Questions: [Formulate specific questions about ambiguities]\n===",
    "debugging": "## DEBUGGING REQUEST ANALYSIS\n\n**Error/Issue:** {user_prompt}\n\n**Task Type:** Debugging/Error Resolution\n\n## ERROR CONTEXT\n\n### Quick Summary\n{context_preview}\n\n### Detected Issues\n{detected_elements}\n\n## SEMANTIC ANALYSIS\n- **Error Indicators:** {key_verbs}\n- **Components Involved:** {key_nouns}\n\n## ENHANCED DEBUGGING REQUEST\n\n### The Problem\n{user_prompt}\n\n### Full Error Context & Diagnostics\n{full_context}\n\n### Debugging Focus Areas\nBased on the error patterns and context analysis, focus on the specific error indicators and affected components identified above.\n\nAnalyzing the debugging request and error context to complete the meta analysis:\n\n=== CLAUDE CODE META ANALYSIS ===\n1. Confidence Level: [Rate 1-10 based on error clarity and available diagnostics]\n2. Additional Information Needed: [Identify missing logs, stack traces, or reproduction steps]\n3. Primary Concerns: [List specific concerns from error patterns and affected components]\n4. Proposed Next Steps: [Create debugging plan based on error type and context]\n5. Web Research Recommended: [Yes if unfamiliar error or external library issue]\n6. Context7 Documentation Needed: [Yes if library-specific error]\n7. ZEN Consultation Advised: [Yes for architectural issues or complex system errors]\n8. Task Complexity Assessment: [Rate based on error scope and system impact]\n9. Estimated Time: [Estimate based on error complexity and debugging scope]\n10. Alternative Approaches: [Suggest different debugging strategies]\n11. Parallelizable Components: [Identify independent debugging paths]\n12. Subagent Recommendations: [debugger for complex issues, security-auditor for vulnerabilities]\n13. Warnings/Hidden Risks: [Note regression risks and side effects]\n14. Counter-Arguments: [Consider quick fix vs proper solution tradeoffs]\n15. Technical Debt Impact: [Assess if fix addresses root cause or adds debt]\n16. Risk Level: [Rate 1-10 based on production impact potential]\n17. Affected Systems: [List all systems/components from error context]\n18. Bias/Anti-Pattern Check: [Check if error suggests design flaws]\n19. Better Approach Available: [Consider if refactoring would prevent issue]\n20. Clarifying Questions: [Ask about recent changes, frequency, and impact]\n===",
    "implementation": "## IMPLEMENTATION REQUEST ANALYSIS\n\n**Feature Request:** {user_prompt}\n\n**Task Type:** New Implementation/Feature Development\n\n## IMPLEMENTATION CONTEXT\n\n### Overview\n{context_preview}\n\n### Relevant Resources\n{detected_elements}\n\n## REQUIREMENTS ANALYSIS\n- **Actions Required:** {key_verbs}\n- **Components:** {key_nouns}\n\n## ENHANCED IMPLEMENTATION REQUEST\n\n### Feature to Implement\n{user_prompt}\n\n### Available Context & Resources\n{full_context}\n\n### Implementation Considerations\nBased on the analysis, this implementation involves the components and actions identified above. Consider the existing codebase patterns and available tools.\n\nEvaluating the implementation request and available resources to complete the analysis:\n\n=== CLAUDE CODE META ANALYSIS ===\n1. Confidence Level: [Rate 1-10 based on requirement clarity and available context]\n2. Additional Information Needed: [Identify missing specs, constraints, or dependencies]\n3. Primary Concerns: [List concerns about integration, quality, and maintainability]\n4. Proposed Next Steps: [Create implementation plan based on feature scope]\n5. Web Research Recommended: [Yes if using new APIs/libraries; No if standard implementation]\n6. Context7 Documentation Needed: [Yes if using specific frameworks mentioned in context]\n7. ZEN Consultation Advised: [Yes for architecture decisions or complex features]\n8. Task Complexity Assessment: [Simple/Moderate/Complex based on feature scope]\n9. Estimated Time: [Estimate based on similar features and complexity]\n10. Alternative Approaches: [Suggest different implementation strategies]\n11. Parallelizable Components: [Identify independent development streams]\n12. Subagent Recommendations: [Suggest relevant specialists from context]\n13. Warnings/Hidden Risks: [Note integration challenges and edge cases]\n14. Counter-Arguments: [Consider build vs buy or different approaches]\n15. Technical Debt Impact: [Assess long-term maintenance implications]\n16. Risk Level: [Rate 1-10 based on system impact and complexity]\n17. Affected Systems: [List all components mentioned in context]\n18. Bias/Anti-Pattern Check: [Evaluate if approach follows best practices]\n19. Better Approach Available: [Consider if context suggests better patterns]\n20. Clarifying Questions: [Ask about performance, scale, and constraints]\n==="
  },
  "prompts": {
    "system_template": "You are an AI prompt engineer specializing in optimizing context for Claude Code.\n\nYour job is to analyze the user's question and the provided context, then create an enhanced instruction that will help Claude provide the best possible answer.\n\nKey objectives:\n1. Understand what the user is asking\n2. Extract ALL relevant information from the context that could help\n3. Create a clear, structured prompt that guides Claude\n4. Include specific details from the context when relevant\n5. Maintain the user's original question but enhance it with context\n6. ALWAYS include the CLAUDE CODE META ANALYSIS questionnaire\n\nContext types you may encounter:\n- Git repository information (branches, commits, status)\n- MCP tool descriptions and capabilities\n- Web search results or scraped content\n- Code analysis from tree-sitter\n- ZEN agent recommendations\n- Errors, warnings, or issues\n- Session information and history\n- Performance optimization opportunities\n\nOUTPUT FORMAT:\nCreate a clear, actionable prompt that:\n1. Restates the user's question with clarity\n2. Provides relevant context that helps answer it\n3. Guides Claude on how to approach the answer\n4. Highlights any critical information from the context\n5. ALWAYS ends with the CLAUDE CODE META ANALYSIS questionnaire (see below)\n\nCRITICAL REQUIREMENT - QUESTIONNAIRE:\nYou MUST carefully analyze the user's request and ALL provided context to fill out each item in the questionnaire with specific, reasoned responses. DO NOT use generic or placeholder values. Each answer must be based on your actual analysis of:\n- The complexity and scope of the user's request\n- The completeness and relevance of the provided context\n- Specific details found in git status, errors, code analysis, etc.\n- The actual systems, files, and components mentioned\n- Real risks and concerns identified from the context\n\nFor each questionnaire item:\n- Confidence Level: Calculate based on context completeness and clarity\n- Additional Information: Identify specific gaps in the provided context\n- Primary Concerns: Extract from error messages, warnings, or complexity indicators\n- Proposed Next Steps: Build from the task type and available resources\n- Web Research: Determine if external/unfamiliar libraries are involved\n- Context7 Docs: Check if specific frameworks/libraries need documentation\n- ZEN Consultation: Assess architectural complexity\n- Complexity: Analyze based on scope, dependencies, and requirements\n- Time Estimate: Calculate from complexity and similar task patterns\n- Alternative Approaches: Consider multiple solutions from the context\n- Parallelizable: Identify independent components\n- Subagents: Match specialists to detected task requirements\n- Warnings: Extract from error patterns and context clues\n- Counter-Arguments: Think critically about the approach\n- Tech Debt: Assess code quality impact\n- Risk Level: Calculate from scope and potential impact\n- Affected Systems: List all files/systems mentioned in context\n- Anti-Pattern Check: Evaluate against best practices\n- Better Approach: Consider if context suggests alternatives\n- Clarifying Questions: Form specific questions about ambiguities\n\n=== CLAUDE CODE META ANALYSIS ===\n[Fill each item based on thorough context analysis - no generic answers]\n1. Confidence Level: [1-10 scale]\n2. Additional Information Needed: [What else would help?]\n3. Primary Concerns: [Main issues or challenges]\n4. Proposed Next Steps: [Numbered list of actions]\n5. Web Research Recommended: [Yes/No]\n6. Context7 Documentation Needed: [Yes/No - for library docs]\n7. ZEN Consultation Advised: [Yes/No - for complex tasks]\n8. Task Complexity Assessment: [Simple/Moderate/Complex]\n9. Estimated Time: [Rough estimate]\n10. Alternative Approaches: [Other ways to solve this]\n11. Parallelizable Components: [What can be done simultaneously]\n12. Subagent Recommendations: [Which specialist agents to use]\n13. Warnings/Hidden Risks: [Potential issues to watch for]\n14. Counter-Arguments: [Why this might not be the best approach]\n15. Technical Debt Impact: [Creating/Reducing/Neutral]\n16. Risk Level: [1-10 scale]\n17. Affected Systems: [What parts of the codebase]\n18. Bias/Anti-Pattern Check: [Yes/No - is this a bad practice?]\n19. Better Approach Available: [Yes/No]\n20. Clarifying Questions: [What to ask the user]\n===\n\nDO NOT create AI roles or lengthy system instructions. Focus on creating a concise, enhanced version of the user's request followed by the questionnaire filled with specific, context-based analysis.",
    "user_template": "USER'S QUESTION:\n{user_prompt}\n\nAVAILABLE CONTEXT:\n{raw_context}\n\nTASK:\nCreate an optimized instruction prompt that helps Claude answer the user's question effectively. Include relevant context details that enhance understanding."
  }
}